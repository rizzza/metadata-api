// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotation"
	"go.infratographer.com/metadata-api/internal/ent/generated/annotationnamespace"
	"go.infratographer.com/metadata-api/internal/ent/generated/metadata"
	"go.infratographer.com/metadata-api/internal/ent/generated/status"
	"go.infratographer.com/metadata-api/internal/ent/generated/statusnamespace"
	"go.infratographer.com/x/gidx"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *AnnotationQuery) CollectFields(ctx context.Context, satisfies ...string) (*AnnotationQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return a, nil
	}
	if err := a.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return a, nil
}

func (a *AnnotationQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(annotation.Columns))
		selectedFields = []string{annotation.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "namespace":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AnnotationNamespaceClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.withNamespace = query
			if _, ok := fieldSeen[annotation.FieldAnnotationNamespaceID]; !ok {
				selectedFields = append(selectedFields, annotation.FieldAnnotationNamespaceID)
				fieldSeen[annotation.FieldAnnotationNamespaceID] = struct{}{}
			}
		case "metadata":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&MetadataClient{config: a.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			a.withMetadata = query
			if _, ok := fieldSeen[annotation.FieldMetadataID]; !ok {
				selectedFields = append(selectedFields, annotation.FieldMetadataID)
				fieldSeen[annotation.FieldMetadataID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[annotation.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, annotation.FieldCreatedAt)
				fieldSeen[annotation.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[annotation.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, annotation.FieldUpdatedAt)
				fieldSeen[annotation.FieldUpdatedAt] = struct{}{}
			}
		case "metadataID":
			if _, ok := fieldSeen[annotation.FieldMetadataID]; !ok {
				selectedFields = append(selectedFields, annotation.FieldMetadataID)
				fieldSeen[annotation.FieldMetadataID] = struct{}{}
			}
		case "data":
			if _, ok := fieldSeen[annotation.FieldData]; !ok {
				selectedFields = append(selectedFields, annotation.FieldData)
				fieldSeen[annotation.FieldData] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		a.Select(selectedFields...)
	}
	return nil
}

type annotationPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AnnotationPaginateOption
}

func newAnnotationPaginateArgs(rv map[string]any) *annotationPaginateArgs {
	args := &annotationPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &AnnotationOrder{Field: &AnnotationOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithAnnotationOrder(order))
			}
		case *AnnotationOrder:
			if v != nil {
				args.opts = append(args.opts, WithAnnotationOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*AnnotationWhereInput); ok {
		args.opts = append(args.opts, WithAnnotationFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (an *AnnotationNamespaceQuery) CollectFields(ctx context.Context, satisfies ...string) (*AnnotationNamespaceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return an, nil
	}
	if err := an.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return an, nil
}

func (an *AnnotationNamespaceQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(annotationnamespace.Columns))
		selectedFields = []string{annotationnamespace.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "annotations":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AnnotationClient{config: an.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			an.WithNamedAnnotations(alias, func(wq *AnnotationQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[annotationnamespace.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, annotationnamespace.FieldCreatedAt)
				fieldSeen[annotationnamespace.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[annotationnamespace.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, annotationnamespace.FieldUpdatedAt)
				fieldSeen[annotationnamespace.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[annotationnamespace.FieldName]; !ok {
				selectedFields = append(selectedFields, annotationnamespace.FieldName)
				fieldSeen[annotationnamespace.FieldName] = struct{}{}
			}
		case "private":
			if _, ok := fieldSeen[annotationnamespace.FieldPrivate]; !ok {
				selectedFields = append(selectedFields, annotationnamespace.FieldPrivate)
				fieldSeen[annotationnamespace.FieldPrivate] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		an.Select(selectedFields...)
	}
	return nil
}

type annotationnamespacePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []AnnotationNamespacePaginateOption
}

func newAnnotationNamespacePaginateArgs(rv map[string]any) *annotationnamespacePaginateArgs {
	args := &annotationnamespacePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &AnnotationNamespaceOrder{Field: &AnnotationNamespaceOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithAnnotationNamespaceOrder(order))
			}
		case *AnnotationNamespaceOrder:
			if v != nil {
				args.opts = append(args.opts, WithAnnotationNamespaceOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*AnnotationNamespaceWhereInput); ok {
		args.opts = append(args.opts, WithAnnotationNamespaceFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (m *MetadataQuery) CollectFields(ctx context.Context, satisfies ...string) (*MetadataQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return m, nil
	}
	if err := m.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return m, nil
}

func (m *MetadataQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(metadata.Columns))
		selectedFields = []string{metadata.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "annotations":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&AnnotationClient{config: m.config}).Query()
			)
			args := newAnnotationPaginateArgs(fieldArgs(ctx, new(AnnotationWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newAnnotationPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					m.loadTotal = append(m.loadTotal, func(ctx context.Context, nodes []*Metadata) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID gidx.PrefixedID `sql:"metadata_id"`
							Count  int             `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(metadata.AnnotationsColumn), ids...))
						})
						if err := query.GroupBy(metadata.AnnotationsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[gidx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					m.loadTotal = append(m.loadTotal, func(_ context.Context, nodes []*Metadata) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Annotations)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "Annotation")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(metadata.AnnotationsColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			m.WithNamedAnnotations(alias, func(wq *AnnotationQuery) {
				*wq = *query
			})
		case "statuses":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&StatusClient{config: m.config}).Query()
			)
			args := newStatusPaginateArgs(fieldArgs(ctx, new(StatusWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newStatusPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					m.loadTotal = append(m.loadTotal, func(ctx context.Context, nodes []*Metadata) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID gidx.PrefixedID `sql:"metadata_id"`
							Count  int             `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(metadata.StatusesColumn), ids...))
						})
						if err := query.GroupBy(metadata.StatusesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[gidx.PrefixedID]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					m.loadTotal = append(m.loadTotal, func(_ context.Context, nodes []*Metadata) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Statuses)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "Status")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(metadata.StatusesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			m.WithNamedStatuses(alias, func(wq *StatusQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[metadata.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, metadata.FieldCreatedAt)
				fieldSeen[metadata.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[metadata.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, metadata.FieldUpdatedAt)
				fieldSeen[metadata.FieldUpdatedAt] = struct{}{}
			}
		case "nodeID":
			if _, ok := fieldSeen[metadata.FieldNodeID]; !ok {
				selectedFields = append(selectedFields, metadata.FieldNodeID)
				fieldSeen[metadata.FieldNodeID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		m.Select(selectedFields...)
	}
	return nil
}

type metadataPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []MetadataPaginateOption
}

func newMetadataPaginateArgs(rv map[string]any) *metadataPaginateArgs {
	args := &metadataPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &MetadataOrder{Field: &MetadataOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithMetadataOrder(order))
			}
		case *MetadataOrder:
			if v != nil {
				args.opts = append(args.opts, WithMetadataOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*MetadataWhereInput); ok {
		args.opts = append(args.opts, WithMetadataFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *StatusQuery) CollectFields(ctx context.Context, satisfies ...string) (*StatusQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *StatusQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(status.Columns))
		selectedFields = []string{status.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "namespace":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&StatusNamespaceClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.withNamespace = query
			if _, ok := fieldSeen[status.FieldStatusNamespaceID]; !ok {
				selectedFields = append(selectedFields, status.FieldStatusNamespaceID)
				fieldSeen[status.FieldStatusNamespaceID] = struct{}{}
			}
		case "metadata":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&MetadataClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			s.withMetadata = query
			if _, ok := fieldSeen[status.FieldMetadataID]; !ok {
				selectedFields = append(selectedFields, status.FieldMetadataID)
				fieldSeen[status.FieldMetadataID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[status.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, status.FieldCreatedAt)
				fieldSeen[status.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[status.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, status.FieldUpdatedAt)
				fieldSeen[status.FieldUpdatedAt] = struct{}{}
			}
		case "metadataID":
			if _, ok := fieldSeen[status.FieldMetadataID]; !ok {
				selectedFields = append(selectedFields, status.FieldMetadataID)
				fieldSeen[status.FieldMetadataID] = struct{}{}
			}
		case "statusNamespaceID":
			if _, ok := fieldSeen[status.FieldStatusNamespaceID]; !ok {
				selectedFields = append(selectedFields, status.FieldStatusNamespaceID)
				fieldSeen[status.FieldStatusNamespaceID] = struct{}{}
			}
		case "source":
			if _, ok := fieldSeen[status.FieldSource]; !ok {
				selectedFields = append(selectedFields, status.FieldSource)
				fieldSeen[status.FieldSource] = struct{}{}
			}
		case "data":
			if _, ok := fieldSeen[status.FieldData]; !ok {
				selectedFields = append(selectedFields, status.FieldData)
				fieldSeen[status.FieldData] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type statusPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []StatusPaginateOption
}

func newStatusPaginateArgs(rv map[string]any) *statusPaginateArgs {
	args := &statusPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &StatusOrder{Field: &StatusOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithStatusOrder(order))
			}
		case *StatusOrder:
			if v != nil {
				args.opts = append(args.opts, WithStatusOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*StatusWhereInput); ok {
		args.opts = append(args.opts, WithStatusFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (sn *StatusNamespaceQuery) CollectFields(ctx context.Context, satisfies ...string) (*StatusNamespaceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return sn, nil
	}
	if err := sn.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return sn, nil
}

func (sn *StatusNamespaceQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(statusnamespace.Columns))
		selectedFields = []string{statusnamespace.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "statuses":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&StatusClient{config: sn.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			sn.WithNamedStatuses(alias, func(wq *StatusQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[statusnamespace.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, statusnamespace.FieldCreatedAt)
				fieldSeen[statusnamespace.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[statusnamespace.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, statusnamespace.FieldUpdatedAt)
				fieldSeen[statusnamespace.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[statusnamespace.FieldName]; !ok {
				selectedFields = append(selectedFields, statusnamespace.FieldName)
				fieldSeen[statusnamespace.FieldName] = struct{}{}
			}
		case "private":
			if _, ok := fieldSeen[statusnamespace.FieldPrivate]; !ok {
				selectedFields = append(selectedFields, statusnamespace.FieldPrivate)
				fieldSeen[statusnamespace.FieldPrivate] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		sn.Select(selectedFields...)
	}
	return nil
}

type statusnamespacePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []StatusNamespacePaginateOption
}

func newStatusNamespacePaginateArgs(rv map[string]any) *statusnamespacePaginateArgs {
	args := &statusnamespacePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &StatusNamespaceOrder{Field: &StatusNamespaceOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithStatusNamespaceOrder(order))
			}
		case *StatusNamespaceOrder:
			if v != nil {
				args.opts = append(args.opts, WithStatusNamespaceOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*StatusNamespaceWhereInput); ok {
		args.opts = append(args.opts, WithStatusNamespaceFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
