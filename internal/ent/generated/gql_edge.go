// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Annotation) Namespace(ctx context.Context) (*AnnotationNamespace, error) {
	result, err := a.Edges.NamespaceOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryNamespace().Only(ctx)
	}
	return result, err
}

func (a *Annotation) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := a.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryMetadata().Only(ctx)
	}
	return result, err
}

func (an *AnnotationNamespace) Annotations(ctx context.Context) (result []*Annotation, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = an.NamedAnnotations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = an.Edges.AnnotationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = an.QueryAnnotations().All(ctx)
	}
	return result, err
}

func (m *Metadata) Annotations(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *AnnotationOrder, where *AnnotationWhereInput,
) (*AnnotationConnection, error) {
	opts := []AnnotationPaginateOption{
		WithAnnotationOrder(orderBy),
		WithAnnotationFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := m.Edges.totalCount[0][alias]
	if nodes, err := m.NamedAnnotations(alias); err == nil || hasTotalCount {
		pager, err := newAnnotationPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &AnnotationConnection{Edges: []*AnnotationEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return m.QueryAnnotations().Paginate(ctx, after, first, before, last, opts...)
}

func (m *Metadata) Statuses(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *StatusOrder, where *StatusWhereInput,
) (*StatusConnection, error) {
	opts := []StatusPaginateOption{
		WithStatusOrder(orderBy),
		WithStatusFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := m.Edges.totalCount[1][alias]
	if nodes, err := m.NamedStatuses(alias); err == nil || hasTotalCount {
		pager, err := newStatusPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &StatusConnection{Edges: []*StatusEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return m.QueryStatuses().Paginate(ctx, after, first, before, last, opts...)
}

func (s *Status) Namespace(ctx context.Context) (*StatusNamespace, error) {
	result, err := s.Edges.NamespaceOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryNamespace().Only(ctx)
	}
	return result, err
}

func (s *Status) Metadata(ctx context.Context) (*Metadata, error) {
	result, err := s.Edges.MetadataOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryMetadata().Only(ctx)
	}
	return result, err
}

func (sn *StatusNamespace) Statuses(ctx context.Context) (result []*Status, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sn.NamedStatuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sn.Edges.StatusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sn.QueryStatuses().All(ctx)
	}
	return result, err
}
