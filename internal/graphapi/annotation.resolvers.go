package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"go.infratographer.com/metadata-api/internal/ent/generated/annotation"
	"go.infratographer.com/metadata-api/internal/ent/generated/metadata"
	"go.infratographer.com/permissions-api/pkg/permissions"
)

// AnnotationUpdate is the resolver for the annotationUpdate field.
func (r *mutationResolver) AnnotationUpdate(ctx context.Context, input AnnotationUpdateInput) (*AnnotationUpdateResponse, error) {
	if err := permissions.CheckAccess(ctx, input.NamespaceID, actionMetadataAnnotationNamespaceUpdate); err != nil {
		return nil, err
	}

	ant, err := r.client.Annotation.Query().Where(
		annotation.AnnotationNamespaceID(input.NamespaceID),
		annotation.HasMetadataWith(metadata.NodeID(input.NodeID)),
	).First(ctx)
	if err != nil {
		// TODO: check that error is the annotation doesn't exist

		md, err := r.client.Metadata.Query().Where(metadata.NodeID(input.NodeID)).First(ctx)
		if err != nil {
			// TODO: check that error is the metadata doesn't exist, otherwise return err
			md, err = r.client.Metadata.Create().SetNodeID(input.NodeID).Save(ctx)
			if err != nil {
				return nil, err
			}
		}

		ant, err = r.client.Annotation.Create().SetMetadata(md).SetAnnotationNamespaceID(input.NamespaceID).SetData(input.Data).Save(ctx)
		if err != nil {
			return nil, err
		}

		return &AnnotationUpdateResponse{Annotation: ant}, nil
	}

	ant, err = ant.Update().SetData(input.Data).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &AnnotationUpdateResponse{Annotation: ant}, nil
}

// AnnotationDelete is the resolver for the annotationDelete field.
func (r *mutationResolver) AnnotationDelete(ctx context.Context, input AnnotationDeleteInput) (*AnnotationDeleteResponse, error) {
	if err := permissions.CheckAccess(ctx, input.NamespaceID, actionMetadataAnnotationNamespaceUpdate); err != nil {
		return nil, err
	}

	ant, err := r.client.Annotation.Query().Where(
		annotation.AnnotationNamespaceID(input.NamespaceID),
		annotation.HasMetadataWith(metadata.NodeID(input.NodeID)),
	).First(ctx)
	if err != nil {
		return nil, err
	}

	err = r.client.Annotation.DeleteOne(ant).Exec(ctx)
	if err != nil {
		return nil, err
	}

	return &AnnotationDeleteResponse{DeletedID: ant.ID}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
